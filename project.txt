This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-07T07:18:08.861Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
deployment.yaml
Dockerfile
frontend.html
server.js
service.yaml

================================================================
Repository Files
================================================================

================
File: deployment.yaml
================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-analyzer
spec:
  replicas: 3
  selector:
    matchLabels:
      app: image-analyzer
  template:
    metadata:
      labels:
        app: image-analyzer
    spec:
      containers:
      - name: image-analyzer
        image: gcr.io/speced/image-analyzer:v1
        ports:
        - containerPort: 8080
        env:
        - name: GOOGLE_CLOUD_PROJECT
          value: speced

================
File: Dockerfile
================
# Dockerfile
FROM node:16

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 8080

CMD ["node", "server.js"]

================
File: frontend.html
================
<!DOCTYPE html>
<html>
<head>
    <title>Image Analyzer</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .results {
            margin-top: 20px;
        }
        .label-item {
            margin: 5px 0;
        }
        #preview {
            max-width: 400px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <h1>Image Analyzer</h1>
    <input type="file" id="imageInput" accept="image/*">
    <img id="preview">
    <div class="results">
        <h2>Analysis Results</h2>
        <div id="labels"></div>
        <h3>Detected Text</h3>
        <div id="texts"></div>
    </div>

    <script>
        document.getElementById('imageInput').addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (!file) return;

            // Show preview
            const preview = document.getElementById('preview');
            preview.src = URL.createObjectURL(file);

            // Upload and analyze
            const formData = new FormData();
            formData.append('image', file);

            try {
                const response = await fetch('/analyze', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();

                // Display labels
                const labelsDiv = document.getElementById('labels');
                labelsDiv.innerHTML = data.labels
                    .map(label => `
                        <div class="label-item">
                            ${label.description}: ${(label.confidence * 100).toFixed(2)}%
                        </div>
                    `)
                    .join('');

                // Display detected text
                const textsDiv = document.getElementById('texts');
                textsDiv.textContent = data.texts;
            } catch (error) {
                console.error('Error:', error);
            }
        });
    </script>
</body>
</html>

================
File: server.js
================
// server.js
const express = require('express');
const multer = require('multer');
const vision = require('@google-cloud/vision');
const { Storage } = require('@google-cloud/storage');
const path = require('path');

const app = express();
const upload = multer({ storage: multer.memoryStorage() });

// Initialize Cloud Vision API client
const client = new vision.ImageAnnotatorClient();

// Initialize Cloud Storage
const storage = new Storage();
const bucketName = 'image_analyzer_andre_pol_tt'; // You'll need to create this

app.use(express.static('public'));

app.post('/analyze', upload.single('image'), async (req, res) => {
  try {
    // Upload to Cloud Storage
    const bucket = storage.bucket(bucketName);
    const blob = bucket.file(`images/${Date.now()}-${req.file.originalname}`);
    const blobStream = blob.createWriteStream();

    blobStream.on('finish', async () => {
      // Perform vision API analysis
      const [result] = await client.labelDetection(`gs://${bucketName}/${blob.name}`);
      const labels = result.labelAnnotations;

      // Get text from image
      const [textResult] = await client.textDetection(`gs://${bucketName}/${blob.name}`);
      const texts = textResult.textAnnotations;

      res.json({
        labels: labels.map(label => ({
          description: label.description,
          confidence: label.score
        })),
        texts: texts.length > 0 ? texts[0].description : 'No text found'
      });
    });

    blobStream.end(req.file.buffer);
  } catch (error) {
    console.error(error);
    res.status(500).send('Error processing image');
  }
});

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

================
File: service.yaml
================
apiVersion: v1
kind: Service
metadata:
  name: image-analyzer
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: image-analyzer
